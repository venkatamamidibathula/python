Strings
=====================================================================

Strings are ordered sequences it means you can use indexing and slicing to grab the strings 

Character:     h e l l o
Index:         0 1 2 3 4
Reverseindex   0 -4-3-2-1 


Slicing grabs subsection of multiple characters

[start:stop:step]

Stop : Index where you will go upto but not include that number


step : Hops it takes 


\n - new line
\t - tab space
len() - checks the length of string

Immutability
======================================================================

Strings are immutable. You cannot reassign them with whatever you want
Mutable means you can use index/position of element to modify the element. Immutable is the opposite

Concatenate two strings using the '+' sign

a= " Mahesh "
b = " Mammidibathula "

a= " Mahesh "
b= " Mamidibathula "
print(a+b)
Output : Mahesh  Mamidibathula 

# Objects in python have in built methods. This methods are nothing but functions inside objects

x = 'Hello World'

#  Gives everything in upper case

print(x.upper())

Formatting : https://pyformat.info/

Lists 
===========================================================================

Ordered sequences that hold a variety of object types

my_list = [1,2,3]

my_list=['String',12,12.45]

len(my_list)

Lists are mutable
new_list.append() - to add new item to end of list
new_list.pop()- by default pop the last element of list but you can specify any number
new_list.sort()- sort order alphabetically
num_list.reverse()- It reverses everything in your list


Dictionaries
=====================================================================================

Stores objects in key value pairs
{'key1':'value1','key2':'value2'}

Unorderd and cannot be sorted. You can retrieve an object without knowing index location
Ordered sequence can be indexed or sliced

my_dictionary={'key1':'value1','key2':'value2'}

my_dictionary['key1']=value1

Example is prices in a store. 

prices_lookup={'Apples':456,'Oranges':532,'Milk':960}

d.keys(),d.values(),d.items()

=====================================================================================
Tuples

Tuples are similar to lists but they are not immutable. Once an element in tuple it 
cannot be reassigned
tuple: (1,2,3)

t.count(),t.index()

=====================================================================================

Sets
They are unordered collection of unique elements.
It should have unique values. 
It never accepts duplicates.
They don't have any particular unique order.
Casting a list to set to get unique values.
=====================================================================================

Booleans

Operators that allow you to convey True or False statements
They are very important with control flow and logic

======================================================================================

Input/Output files

test.txt
%%writefile myfile.txt
Hello this is a text file
this is the second line
this is third line


myfile=open('myfile.txt')
myfile=open('whoops_wrong.txt')
myfile.read() - To get the entire text as string.The cursor goes all to the end of line after its done
myfile.seek(0) - to bring the cursor back to first place
contents=myfiles.read()
myfile.seek(0)
myfile.readlines() - You get each lines as a list of objects

File Locations

to open a file in any location give the file path

myfile=open("C:\\Users\\Username\\Folder\\test.txt")
pwd- present working directory 
 for mac os myfile=open("/Users/Username...)

myfile.close() - to close the file. We have to manually close it.
myfile=open('myfile.txt')

with open('myfile.txt') as my_new_file:
     contents=my_newfile.read()
	
If we using with we dont need to worry about closing the file

with open('myfile.txt',mode='r') as myfile:
     contents= myfile.read()

r-read only, w-write only, a-append only, r+ - read and write, w+ - read and write 


with open('my_new_file.txt',mode='r') as f:
     print(f.read())

with open('my_new_file.txt', mode='a') as f:
     f.write('\n Four on forth')

with open('ashdashdashd.txt',mode='w') as f:
     f.write('I created this file') 

with mode as 'w' it overrides an existing file or creates a new file if not present.

===========================================================================================================
Loops

for loop in strings we can access each character in string

for _ in 'HelloWorld:
    print("Mahesh")

tuple unpacking

 		

=========================================================================================================
while loops:

while booleancondition:
	do something
else:
	do something else


break, continue and pass
break: Breaks out of the current closet enclosing loop
continue: Go the top of enclosing closest loop
pass : does nothing at all

x=[1,2,3]

for item in x:
	#comment
	pass

===============================================================================================================


	
range - range all the way upto but not including that number
range(10) - all the way upto 10 but not 10

range(0,10,2) - step size or hop size of 2

